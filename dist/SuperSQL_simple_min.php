<?php
/*
 Author: Andrews54757
 License: MIT (https://github.com/ThreeLetters/SuperSQL/blob/master/LICENSE)
 Source: https://github.com/ThreeLetters/SQL-Library
 Build: v1.0.3
 Built on: 18/08/2017
*/

// lib/connector/index.php
class Response{public$result;public$affected;public$ind=0;public$error;public$errorData;public$outTypes;public$complete=false;public$stmt;function __construct($a,$b,&$c,&$d){$this->error=!$b;if(!$b){$this->errorData=$a->errorInfo();}else{$this->outTypes=$c;$this->init($a,$d);$this->affected=$a->rowCount();}}private function init(&$a,&$d){if($d===0){$c=$this->outTypes;$e=$a->fetchAll();if($c){foreach($e as$f=>&$g){$this->map($g,$c);}}$this->result=$e;$this->complete=true;}else if($d===1){$this->stmt=$a;$this->result=array();}}function close(){$this->complete=true;if($this->stmt){$this->stmt->closeCursor();$this->stmt=null;}}private function fetchNextRow(){$g=$this->stmt->fetch();if($g){if($this->outTypes){$this->map($g,$this->outTypes);}array_push($this->result,$g);return$g;}else{$this->complete=true;$this->stmt->closeCursor();$this->stmt=null;return false;}}private function fetchAll(){while($g=$this->fetchNextRow()){}}function map(&$g,&$c){foreach($c as$h=>$i){if(isset($g[$h])){switch($i){case 'int':$g[$h]=(int)$g[$h];break;case 'string':$g[$h]=(string)$g[$h];break;case 'bool':$g[$h]=$g[$h]? true : false;break;case 'json':$g[$h]=json_decode($g[$h]);break;case 'obj':$g[$h]=unserialize($g[$h]);break;}}}}function error(){return$this->error ?$this->errorData : false;}function getData($j=false){if(!$this->complete&&!$j)$this->fetchAll();return$this->result;}function getAffected(){return$this->affected;}function countRows(){return count($this->result);}function next(){if(isset($this->result[$this->ind])){return$this->result[$this->ind++];}else if(!$this->complete){$g=$this->fetchNextRow();$this->ind++;return$g;}else{return false;}}function reset(){$this->ind=0;}}class Connector{public$db;public$log=array();public$dev=false;function __construct($k,$l,$m){$this->db=new \PDO($k,$l,$m);$this->log=array();}function query($n,$o=null,$c=null,$d=0){$p=$this->db->prepare($n);if($o)$q=$p->execute($o);else$q=$p->execute();if($this->dev)array_push($this->log,array($n,$o));if($d!==3){return new Response($p,$q,$c,$d);}else{return$p;}}function _query(&$r,$s,&$t,&$c=null,$d=0){$p=$this->db->prepare($r);if($this->dev)array_push($this->log,array($r,$s,$t));foreach($s as$u=>&$v){$p->bindParam($u+1,$v[0],$v[1]);}$q=$p->execute();if(!isset($t[0])){return new Response($p,$q,$c,$d);}else{$w=array();array_push($w,new Response($p,$q,$c,0));foreach($t as$u=>$x){foreach($x as$y=>&$z){$s[$y][0]=$z;}$q=$p->execute();array_push($w,new Response($p,$q,$c,0));}return$w;}}function close(){$this->db=null;$this->queries=null;}}
// lib/parser/Simple.php
class SimParser{public static function WHERE($a,&$b,&$c){if(!empty($a)){$b.=' WHERE ';$d=0;foreach($a as$e=>$f){if($d!==0){$b.=' AND ';}$b.='`'.$e.'` = ?';array_push($c,$f);$d++;}}}public static function SELECT($g,$h,$a,$i){$b='SELECT ';$c=array();if(!isset($h[0])){$b.='*';}else{$j=count($h);for($d=0;$d<$j;$d++){if($d!==0){$b.=', ';}$b.='`'.$h[$d].'`';}}$b.=' FROM `'.$g.'`';self::WHERE($a,$b,$c);if($i)$b.=' '.$i;return array($b,$c);}public static function INSERT($g,$k){$b='INSERT INTO `'.$g.'` (';$l=') VALUES (';$c=array();$d=0;foreach($k as$e=>$f){if($d!==0){$b.=', ';$l.=', ';}$b.='`'.$e.'`';$l.='?';array_push($c,$f);$d++;}$b.=$l.')';return array($b,$c);}public static function UPDATE($g,$k,$a){$b='UPDATE `'.$g.'` SET ';$c=array();$d=0;foreach($k as$e=>$f){if($d!==0){$b.=', ';}$b.='`'.$e.'` = ?';array_push($c,$f);$d++;}self::WHERE($a,$b,$c);return array($b,$c);}public static function DELETE($g,$a){$b='DELETE FROM `'.$g.'`';$c=array();self::WHERE($a,$b,$c);return array($b,$c);}}
// index.php
class SuperSQL{public$con;public$lockMode=false;function __construct($a,$b,$c){$this->con=new Connector($a,$b,$c);}function sSELECT($d,$e=array(),$f=array(),$g=""){$h=SimParser::SELECT($d,$e,$f,$g);return$this->con->query($h[0],$h[1],null,$this->lockMode ? 0 : 1);}function sINSERT($d,$i){$h=SimParser::INSERT($d,$i);return$this->con->query($h[0],$h[1]);}function sUPDATE($d,$i,$f=array()){$h=SimParser::UPDATE($d,$i,$f);return$this->con->query($h[0],$h[1]);}function sDELETE($d,$f=array()){$h=SimParser::DELETE($d,$f);return$this->con->query($h[0],$h[1]);}function query($j,$k=null,$l=null,$m=0){return$this->con->query($j,$k,$l,$m);}function close(){$this->con->close();}function dev(){$this->con->dev=true;}function getLog(){return$this->con->log;}function transact($n){$this->con->db->beginTransaction();$o=$n($this);if($o===false)$this->con->db->rollBack();else$this->con->db->commit();return$o;}function modeLock($p){$this->lockMode=$p;}}
?>
<?php
/*
 Author: Andrews54757
 License: MIT (https://github.com/ThreeLetters/SuperSQL/blob/master/LICENSE)
 Source: https://github.com/ThreeLetters/SQL-Library
 Build: v1.0.1
 Built on: 09/08/2017
*/

// lib/connector/index.php
class Response{public$result;public$affected;public$ind;public$error;public$errorData;function __construct($a,$b,$c){$this->error=!$b;if(!$b){$this->errorData=$a->errorInfo();}else{$d=$a->fetchAll();$this->result=$d;if(count($c)!=0){foreach($d as$e=>$f){foreach($c as$g=>$h){if(isset($f[$g])){switch($h){case "int":$this->result[$e][$g]=(int)$f[$g];break;case "string":$this->result[$e][$g]=(string)$f[$g];break;case "bool":$this->result[$e][$g]=$f[$g]? true : false;break;case "json":$this->result[$e][$g]=json_decode($f[$g]);break;case "obj":$this->result[$e][$g]=unserialize($f[$g]);break;}}}}}$this->affected=$a->rowCount();}$this->ind=0;$a->closeCursor();}function error(){return$this->error ?$this->errorData : false;}function getData(){return$this->result;}function getAffected(){return$this->affected;}function next(){return$this->result[$this->ind++];}function reset(){$this->ind=0;}}class Connector{public$queries=array();public$db;public$log=array();public$dev=false;function __construct($i,$j,$k){$this->db=new \PDO($i,$j,$k);$this->log=array();}function query($l,$m=null,$c=array()){if(isset($this->queries[$l])){$n=$this->queries[$l];}else{$n=$this->db->prepare($l);$this->queries[$l]=$n;}if($m)$o=$n->execute($m);else$o=$n->execute();if($this->dev)array_push($this->log,array($l,$m));return new Response($n,$o,$c);}function _query($p,$q,$r,$s,$c=array()){if(isset($this->queries[$p."|".$s])){$t=$this->queries[$p."|".$s];$n=$t[1];$u=&$t[0];foreach($q as$v=>$w){$u[$v][0]=$w[0];}if($this->dev)array_push($this->log,array("fromcache",$p,$s,$q,$r));}else{$n=$this->db->prepare($p);$u=$q;foreach($u as$v=>&$x){$n->bindParam($v+1,$x[0],$x[1]);}$this->queries[$p."|".$s]=array(&$u,$n);if($this->dev)array_push($this->log,array($p,$s,$q,$r));}if(count($r)==0){$o=$n->execute();return new Response($n,$o,$c);}else{$y=array();$o=$n->execute();array_push($y,new Response($n,$o,$c));foreach($r as$v=>$z){foreach($z as$aa=>$ba){$u[$aa][0]=$ba;}$o=$n->execute();array_push($y,new Response($n,$o,$c));}return$y;}}function close(){$this->db=null;$this->queries=null;}function clearCache(){$this->queries=array();}}
// lib/parser/Simple.php
class SimParser{public static function WHERE($a,&$b,&$c){if(count($a)!=0){$b.=" WHERE ";$d=0;foreach($a as$e=>$f){if($d!=0){$b.=" AND ";}$b.="`".$e."` = ?";array_push($c,$f);$d++;}}}public static function SELECT($g,$h,$a,$i){$b="SELECT ";$c=array();$j=count($h);if($j==0){$b.="*";}else{for($d=0;$d<$j;$d++){if($d!=0){$b.=", ";}$b.="`".$h[$d]."`";}}$b.=" FROM `".$g."`";self::WHERE($a,$b,$c);if($i)$b.=" ".$i;return array($b,$c);}public static function INSERT($g,$k){$b="INSERT INTO `".$g."` (";$l=") VALUES (";$c=array();$d=0;foreach($k as$e=>$f){if($d!=0){$b.=", ";$l.=", ";}$b.="`".$e."`";$l.="?";array_push($c,$f);$d++;}$b.=$l.")";return array($b,$c);}public static function UPDATE($g,$k,$a){$b="UPDATE `".$g."` SET ";$c=array();$d=0;foreach($k as$e=>$f){if($d!=0){$b.=", ";}$b.="`".$e."` = ?";array_push($c,$f);$d++;}self::WHERE($a,$b,$c);return array($b,$c);}public static function DELETE($g,$a){$b="DELETE FROM `".$g."`";$c=array();self::WHERE($a,$b,$c);return array($b,$c);}}
// index.php
class SuperSQL{public$con;function __construct($a,$b,$c){$this->con=new Connector($a,$b,$c);}function sSELECT($d,$e=array(),$f=array(),$g=""){$h=SimParser::SELECT($d,$e,$f,$g);return$this->con->query($h[0],$h[1]);}function sINSERT($d,$i){$h=SimParser::INSERT($d,$i);return$this->con->query($h[0],$h[1]);}function sUPDATE($d,$i,$f=array()){$h=SimParser::UPDATE($d,$i,$f);return$this->con->query($h[0],$h[1]);}function sDELETE($d,$f=array()){$h=SimParser::DELETE($d,$f);return$this->con->query($h[0],$h[1]);}function query($j,$k=null){return$this->con->query($j,$k);}function close(){$this->con->close();}function dev(){$this->con->dev=true;}function getLog(){return$this->con->log;}function clearCache(){$this->con->clearCache();}function transact($l){$this->con->db->beginTransaction();$m=$l($this);if($m===false)$this->con->db->rollBack();else$this->con->db->commit();return$m;}}
?>
<?php
/*
 Author: Andrews54757
 License: MIT (https://github.com/ThreeLetters/SuperSQL/blob/master/LICENSE)
 Source: https://github.com/ThreeLetters/SQL-Library
 Build: v1.0.5
 Built on: 25/08/2017
*/

namespace SuperSQL;

// lib/connector.php
class Response{public$result;public$affected;public$ind=0;public$error;public$errorData;public$outTypes;public$complete=false;public$stmt;function __construct($a,$b,&$c,$d){$this->error=!$b;if(!$b){$this->errorData=$a->errorInfo();}else{$this->outTypes=$c;$this->init($a,$d);$this->affected=$a->rowCount();}}private function init(&$a,&$d){if($d===0){$c=$this->outTypes;$e=$a->fetchAll();if($c){foreach($e as$f=>&$g){$this->map($g,$c);}}$this->result=$e;$this->complete=true;}else if($d===1){$this->stmt=$a;$this->result=array();}}function close(){$this->complete=true;if($this->stmt){$this->stmt->closeCursor();$this->stmt=null;}}private function fetchNextRow(){$g=$this->stmt->fetch();if($g){if($this->outTypes){$this->map($g,$this->outTypes);}array_push($this->result,$g);return$g;}else{$this->complete=true;$this->stmt->closeCursor();$this->stmt=null;return false;}}private function fetchAll(){while($g=$this->fetchNextRow()){}}function map(&$g,&$c){foreach($c as$h=>$i){if(isset($g[$h])){switch($i){case 'int':$g[$h]=(int)$g[$h];break;case 'string':$g[$h]=(string)$g[$h];break;case 'bool':$g[$h]=$g[$h]? true : false;break;case 'json':$g[$h]=json_decode($g[$h]);break;case 'obj':$g[$h]=unserialize($g[$h]);break;}}}}function error(){return$this->error ?$this->errorData : false;}function getData($j=false){if(!$this->complete&&!$j)$this->fetchAll();return$this->result;}function getAffected(){return$this->affected;}function countRows(){return count($this->result);}function next(){if(isset($this->result[$this->ind])){return$this->result[$this->ind++];}else if(!$this->complete){$g=$this->fetchNextRow();$this->ind++;return$g;}else{return false;}}function reset(){$this->ind=0;}}class Connector{public$db;public$log=array();public$dev=false;function __construct($k,$l,$m){$this->db=new \PDO($k,$l,$m);$this->log=array();}function query($n,$o=null,$c=null,$d=0){$p=$this->db->prepare($n);if($o)$q=$p->execute($o);else$q=$p->execute();if($this->dev)array_push($this->log,array($n,$o));if($d!==3){return new Response($p,$q,$c,$d);}else{return$p;}}function _query(&$r,$s,&$t,&$c=null,$d=0){$p=$this->db->prepare($r);if($this->dev)array_push($this->log,array($r,$s,$t));foreach($s as$u=>&$v){$p->bindParam($u+1,$v[0],$v[1]);}$q=$p->execute();if(!isset($t[0])){return new Response($p,$q,$c,$d);}else{$w=array();array_push($w,new Response($p,$q,$c,0));foreach($t as$u=>$x){foreach($x as$y=>&$z){$s[$y][0]=$z;}$q=$p->execute();array_push($w,new Response($p,$q,$c,0));}return$w;}}function close(){$this->db=null;$this->queries=null;}}
// lib/parser.php
class Parser{static function getArg(&$a){preg_match('/^(?:\[(?<a>.{2})\])(?<out>.*)/',$a,$b);if(isset($b["a"])){$a=$b["out"];return$b["a"];}else{return false;}}static function append(&$c,$d,$e,$f){if(is_array($d)&&$f[$e][2]<5){$g=count($d);for($h=1;$h<$g;$h++){if(!isset($c[$h-1]))$c[$h-1]=array();$c[$h-1][$e]=$d[$h];}}}static function escape($d){if(is_int($d)){return(int)$d;}else{return self::quote($d);}}static function append2(&$i,$j,$k,$f){function stripArgs(&$l){preg_match('/(?:\[.{2}\]){0,2}([^\[]*)/',$l,$m);return$m[1];}function escape($d,$k){if(!isset($k[2]))return$d;switch($k[2]){case 0: return$d ? '1' : '0';break;case 1: return(int)$d;break;case 2: return(string)$d;break;case 3: return$d;break;case 4: return null;break;case 5: return json_encode($d);break;case 6: return serialize($d);break;}}function recurse(&$n,$d,$j,$o,$f){foreach($d as$h=>&$p){if($h[0]==="#")continue;stripArgs($h);$q=$h.'#'.$o;if(isset($j[$q]))$r=$j[$q];else$r=$j[$h];$s=is_array($p)&&(!isset($f[$r][2])||$f[$r][2]<5);if($s){if(isset($p[0])){foreach($p as$t=>&$u){$v=$r+$t;if(isset($n[$v]))trigger_error('Key collision: '.$h,E_USER_WARNING);$n[$v]=escape($u,$f[$v]);}}else{recurse($n,$p,$j,$o.'/'.$h,$f);}}else{if(isset($n[$r]))trigger_error('Key collision: '.$h,E_USER_WARNING);$n[$r]=escape($p,$f[$r]);}}}$g=count($k);for($l=1;$l<$g;$l++){$d=$k[$l];if(!isset($i[$l-1]))$i[$l-1]=array();recurse($i[$l-1],$d,$j,'',$f);}}static function quote($a){preg_match('/([^.]*)\.?(.*)?/',$a,$m);if($m[2]!==''){return '`'.$m[1].'.'.$m[2].'`';}else{return '`'.$m[1].'`';}}static function table($w){if(is_array($w)){$x='';foreach($w as$t=>&$d){$y=self::getType($d);if($t!==0)$x.=', ';$x.='`'.$d.'`';if($y)$x.=' AS `'.$y.'`';}return$x;}else{return '`'.$w.'`';}}static function value($z,$aa){$ba=$z ?$z : gettype($aa);$z=\PDO::PARAM_STR;$ca=2;if($ba==='integer'||$ba==='int'||$ba==='double'||$ba==='doub'){$z=\PDO::PARAM_INT;$ca=1;$aa=(int)$aa;}else if($ba==='string'||$ba==='str'){$aa=(string)$aa;$ca=2;}else if($ba==='boolean'||$ba==='bool'){$z=\PDO::PARAM_BOOL;$aa=$aa ? '1' : '0';$ca=0;}else if($ba==='null'||$ba==='NULL'){$ca=4;$z=\PDO::PARAM_NULL;$aa=null;}else if($ba==='resource'||$ba==='lob'){$z=\PDO::PARAM_LOB;$ca=3;}else if($ba==='json'){$ca=5;$aa=json_encode($aa);}else if($ba==='obj'){$ca=6;$aa=serialize($aa);}else{$aa=(string)$aa;trigger_error('Invalid type '.$ba.' Assumed STRING',E_USER_WARNING);}return array($aa,$z,$ca);}static function getType(&$a){if(isset($a[1])&&$a[strlen($a)-1]===']'){$da=strrpos($a,'[');if($da===false){return '';}$ea=substr($a,$da+1,-1);$a=substr($a,0,$da);return$ea;}else return '';}static function rmComments($a){preg_match('/([^#]*)/',$a,$m);return$m[1];}static function conditions($k,&$f=false,&$fa=false,&$e=0){$ga=function(&$ga,$k,&$fa,&$e,&$f,$ha=' AND ',$ia=' = ',$ja=''){$ka=0;$x='';foreach($k as$l=>&$d){if($l[0]==='#'){$la=true;$l=substr($l,1);}else{$la=false;}preg_match('/^(?:\[(?<a>.{2})\])(?:\[(?<b>.{2})\])?(?<out>.*)/',$l,$m);if(isset($m["a"])){$ma=$m["a"];$l=$m["out"];$na=isset($m["b"])?$m["b"]: false;}else{$ma=false;}$oa=!isset($d[0]);$pa=$ha;$qa=$ia;$z=$la ? false : self::getType($l);$ra=is_array($d)&&$z!=='json'&&$z!=='obj';if($ma&&($ma==='||'||$ma==='&&')){$pa=($ma==='||')? ' OR ' : ' AND ';$ma=$na;if($ra&&$ma&&($ma==='||'||$ma==='&&')){$ha=$pa;$pa=($ma==='||')? ' OR ' : ' AND ';$ma=self::getArg($l);}}$sa=false;if($ma&&$ma!=="=="){switch($ma){case '!=':$qa=' != ';break;case '>>':$qa=' > ';break;case '<<':$qa=' < ';break;case '>=':$qa=' >= ';break;case '<=':$qa=' <= ';break;case '~~':$qa=' LIKE ';break;case '!~':$qa=' NOT LIKE ';break;default: if($ma!=='><'&&$ma!=='<>')throw new \Exception("Invalid operator ".$ma." Available: ==,!=,>>,<<,>=,<=,~~,!~,<>,><");else$sa=true;break;}}else{if(!$oa||$ma==='==')$qa=' = ';}if(!$ra)$ha=$pa;if($ka!==0)$x.=$ha;$ta=self::rmComments($l);if(!$la)$ta=self::quote($ta);if($ra){if($oa){$x.='('.$ga($ga,$d,$fa,$e,$f,$pa,$qa,$ja.'/'.$l).')';}else{if($fa!==false&&!$la){$fa[$l]=$e;$fa[$l.'#'.$ja]=$e++;}if($sa){$e+=2;$x.='('.$ta.($ma==='<>' ? 'NOT' : '').' BETWEEN ';if($la){$x.=$d[0].' AND '.$d[1];}else if($f!==false){$x.='? AND ?';array_push($f,self::value($z,$d[0]));array_push($f,self::value($z,$d[1]));}else{$x.=self::escape($d[0]).' AND '.self::escape($d[1]);}$x.=')';}else{$x.='(';foreach($d as$h=>&$p){if($h!==0)$x.=$pa;$e++;$x.=$ta.$qa;if($la){$x.=$p;}else if($f!==false){$x.='?';array_push($f,self::value($z,$p));}else{$x.=self::escape($p);}}$x.=')';}}}else{$x.=$ta.$qa;if($la){$x.=$d;}else{if($f!==false){$x.='?';array_push($f,self::value($z,$d));}else{$x.=self::escape($d);}if($fa!==false){$fa[$l]=$e;$fa[$l.'#'.$ja]=$e++;}}}$ka++;}return$x;};return$ga($ga,$k,$fa,$e,$f);}static function JOIN($ha,&$x){foreach($ha as$l=>&$d){if($l[0]==='#'){$la=true;$l=substr($l,1);}else{$la=false;}$ma=self::getArg($l);switch($ma){case '<<':$x.=' RIGHT JOIN ';break;case '>>':$x.=' LEFT JOIN ';break;case '<>':$x.=' FULL JOIN ';break;default:$x.=' JOIN ';break;}$x.='`'.$l.'` ON ';if($la){$x.=$d;}else{$x.=self::conditions($d);}}}static function columns($ua,&$x,&$va){$wa='';$xa=$ua[0][0];if($xa==='D'||$xa==='I'){if($ua[0]==='DISTINCT'){$ya=1;$x.='DISTINCT ';array_splice($ua,0,1);}else if(substr($ua[0],0,11)==='INSERT INTO'){$ya=1;$x=$ua[0].' '.$x;array_splice($ua,0,1);}else if(substr($ua[0],0,4)==='INTO'){$ya=1;$wa=' '.$ua[0].' ';array_splice($ua,0,1);}}if(isset($ua[0])){foreach($ua as$t=>&$d){preg_match('/(?<column>[a-zA-Z0-9_\.]*)(?:\[(?<alias>[^\]]*)\])?(?:\[(?<type>.*)\])?/',$d,$za);$d=$za["column"];$ab=false;if(isset($za["alias"])){$ab=$za["alias"];if(isset($za["type"])){$z=$za["type"];}else{if($ab==="json"||$ab==="obj"||$ab==="int"||$ab==="string"||$ab==="bool"){$z=$ab;$ab=false;}else$z=false;}if($z){if(!$va)$va=array();$va[$ab ?$ab :$d]=$z;}}if($t!=0){$x.=', ';}$x.=self::quote($d);if($ab)$x.=' AS `'.$ab.'`';}}else$x.='*';$x.=$wa;}static function SELECT($w,$ua,$bb,$ha,$cb){$x='SELECT ';$f=array();$i=array();$va=null;if(!isset($ua[0])){$x.='*';}else{self::columns($ua,$x,$va);}$x.=' FROM '.self::table($w);if($ha){self::JOIN($ha,$x);}if(!empty($bb)){$x.=' WHERE ';$e=array();if(isset($bb[0])){$x.=self::conditions($bb[0],$f,$e);self::append2($i,$e,$bb,$f);}else{$x.=self::conditions($bb,$f,$e);}}if($cb){if(is_int($cb)){$x.=' LIMIT '.$cb;}else if(is_string($cb)){$x.=' '.$cb;}}return array($x,$f,$i,$va);}static function INSERT($w,$db){$x='INSERT INTO '.self::table($w).' (';$f=array();$i=array();$eb='';$t=0;$fb=0;$j=array();$gb=isset($db[0]);$k=$gb ?$db[0]:$db;foreach($k as$l=>&$d){if($l[0]==='#'){$la=true;$l=substr($l,1);}else{$la=false;}if($fb!==0){$x.=', ';$eb.=', ';}preg_match('/(?<out>[^\#\[]*)(?:#[^[]*)?(?:\[(?<type>[^]]*)\])?/',$l,$m);$l=$m["out"];$z=isset($m["type"])?$m["type"]: false;$x.='`'.$l.'`';if($la){$eb.=$d;}else{$eb.='?';array_push($f,self::value($z,$d));if($gb){$j[$l]=$t++;}else{self::append($i,$d,$t++,$f);}}$fb++;}if($gb)self::append2($i,$j,$db,$f);$x.=') VALUES ('.$eb.')';return array($x,$f,$i);}static function UPDATE($w,$db,$bb){$x='UPDATE '.self::table($w).' SET ';$f=array();$i=array();$t=0;$fb=0;$j=array();$gb=isset($db[0]);$k=$gb ?$db[0]:$db;foreach($k as$l=>&$d){if($l[0]==='#'){$la=true;$l=substr($l,1);}else{$la=false;}if($fb!==0){$x.=', ';}if($la){$x.='`'.$l.'` = '.$d;}else{preg_match('/(?:\[(?<arg>.{2})\])?(?<out>[^\[]*)(?:\[(?<type>[^\]]*)\])?/',$l,$m);$l=$m["out"];$x.='`'.$l.'` = ';if(isset($m["arg"])){switch($m["arg"]){case '+=':$x.='`'.$l.'` + ?';break;case '-=':$x.='`'.$l.'` - ?';break;case '/=':$x.='`'.$l.'` / ?';break;case '*=':$x.='`'.$l.'` * ?';break;default:$x.='?';break;}}$z=isset($m["type"])?$m["type"]: false;array_push($f,self::value($z,$d));if($gb){$j[$l]=$t++;}else{self::append($i,$d,$t++,$f);}}$fb++;}if($gb)self::append2($i,$j,$db,$f);if(!empty($bb)){$x.=' WHERE ';$e=array();if(isset($bb[0])){$x.=self::conditions($bb[0],$f,$e,$t);self::append2($i,$e,$bb,$f);}else{$x.=self::conditions($bb,$f,$e,$t);}}return array($x,$f,$i);}static function DELETE($w,$bb){$x='DELETE FROM '.self::table($w);$f=array();$i=array();if(!empty($bb)){$x.=' WHERE ';$e=array();if(isset($bb[0])){$x.=self::conditions($bb[0],$f,$e);self::append2($i,$e,$bb,$f);}else{$x.=self::conditions($bb,$f,$e);}}return array($x,$f,$i);}}
// index.php
class SuperSQL{public$con;public$lockMode=false;function __construct($a,$b,$c){$this->con=new Connector($a,$b,$c);}function SELECT($d,$e=array(),$f=array(),$g=null,$h=false){if((is_int($g)||is_string($g))&&!$h){$h=$g;$g=null;}$i=Parser::SELECT($d,$e,$f,$g,$h);return$this->con->_query($i[0],$i[1],$i[2],$i[3],$this->lockMode ? 0 : 1);}function INSERT($d,$j){$i=Parser::INSERT($d,$j);return$this->con->_query($i[0],$i[1],$i[2]);}function UPDATE($d,$j,$f=array()){$i=Parser::UPDATE($d,$j,$f);return$this->con->_query($i[0],$i[1],$i[2]);}function DELETE($d,$f=array()){$i=Parser::DELETE($d,$f);return$this->con->_query($i[0],$i[1],$i[2]);}function query($k,$l=null,$m=null,$n=0){return$this->con->query($k,$l,$m,$n);}function close(){$this->con->close();}function dev(){$this->con->dev=true;}function getLog(){return$this->con->log;}function transact($o){$this->con->db->beginTransaction();$p=$o($this);if($p===false)$this->con->db->rollBack();else$this->con->db->commit();return$p;}function modeLock($q){$this->lockMode=$q;}}
?>
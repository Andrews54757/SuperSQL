<?php
/*
 Author: Andrews54757
 License: MIT (https://github.com/ThreeLetters/SuperSQL/blob/master/LICENSE)
 Source: https://github.com/ThreeLetters/SQL-Library
 Build: v1.0.8
 Built on: 01/09/2017
*/

namespace SuperSQL;

// lib/connector.php
class Response implements \ArrayAccess,\Iterator{public$result;public$affected;public$ind=0;public$error;public$errorData;public$outTypes;public$complete=true;function __construct($a,$b,&$c,$d){$this->error=!$b;if(!$b){$this->errorData=$a->errorInfo();}else{$this->outTypes=$c;$this->init($a,$d);$this->affected=$a->rowCount();}}private function init(&$a,&$d){if($d===0){$c=$this->outTypes;$e=$a->fetchAll(\PDO::FETCH_ASSOC);if($c){foreach($e as$f=>&$g){$this->map($g,$c);}}$this->result=$e;}else if($d===1){$this->stmt=$a;$this->complete=false;$this->result=array();}}function close(){$this->complete=true;if($this->stmt){$this->stmt->closeCursor();$this->stmt=null;}}private function fetchNextRow(){$g=$this->stmt->fetch(\PDO::FETCH_ASSOC);if($g){if($this->outTypes){$this->map($g,$this->outTypes);}array_push($this->result,$g);return$g;}else{$this->close();return false;}}private function fetchAll(){while($this->fetchNextRow()){}}function map(&$g,&$c){foreach($c as$h=>$i){if(isset($g[$h])){switch($i){case 'int':$g[$h]=(int)$g[$h];break;case 'string':$g[$h]=(string)$g[$h];break;case 'bool':$g[$h]=$g[$h]?true:false;break;case 'json':$g[$h]=json_decode($g[$h]);break;case 'obj':$g[$h]=unserialize($g[$h]);break;}}}}function error(){return$this->error?$this->errorData:false;}function getData($j=false){if(!$this->complete&&!$j)$this->fetchAll();return$this->result;}function getAffected(){return$this->affected;}function countRows(){return count($this->result);}function offsetSet($k,$l){}function offsetExists($k){return$this->offsetGet($k)===null?false:true;}function offsetUnset($k){}function offsetGet($k){if(is_int($k)){if(isset($this->result[$k])){return$this->result[$k];}else if(!$this->complete){while($this->fetchNextRow()){if(isset($this->result[$k]))return$this->result[$k];}}}return null;}function next(){if(isset($this->result[$this->ind])){return$this->result[$this->ind++];}else if(!$this->complete){$g=$this->fetchNextRow();$this->ind++;return$g;}else{return false;}}function rewind(){$this->ind=0;}function current(){return$this->result[$this->ind];}function key(){return$this->ind;}function valid(){return$this->offsetExists($this->ind);}}class Connector{public$db;public$log=array();public$dev=false;function __construct($m,$n,$o){$this->db=new \PDO($m,$n,$o);$this->log=array();}function query($p,$q=null,$c=null,$d=0){$r=$this->db->prepare($p);if($q)$s=$r->execute($q);else$s=$r->execute();if($this->dev)array_push($this->log,array($p,$q));if($d!==3){return new Response($r,$s,$c,$d);}else{return$r;}}function _query(&$t,$u,&$v,&$c=null,$d=0){$r=$this->db->prepare($t);if($this->dev)array_push($this->log,array($t,$u,$v));foreach($u as$w=>&$x){$r->bindParam($w+1,$x[0],$x[1]);}$s=$r->execute();if(!isset($v[0])){return new Response($r,$s,$c,$d);}else{$y=array();array_push($y,new Response($r,$s,$c,0));foreach($v as$w=>$l){foreach($l as$z=>&$aa){$u[$z][0]=$aa;}$s=$r->execute();array_push($y,new Response($r,$s,$c,0));}return$y;}}function close(){$this->db=null;$this->queries=null;}}
// lib/parser.php
class Parser{static function getArg(&$a){preg_match('/^(?:\[(?<a>.{2})\])(?<out>.*)/',$a,$b);if(isset($b['a'])){$a=$b['out'];return$b['a'];}else{return false;}}static function isRaw(&$c){if($c[0]==='#'){$c=substr($c,1);return true;}return false;}static function append(&$d,$e,$f,$g){if(is_array($e)&&$g[$f][2]<5){$h=count($e);for($i=1;$i<$h;$i++){if(!isset($d[$i-1]))$d[$i-1]=array();$d[$i-1][$f]=$e[$i];}}}static function escape($e,$j){switch($j){case 0:return$e?'1':'0';break;case 1:return(int)$e;break;case 2:return(string)$e;break;case 3:return$e;break;case 4:return null;break;case 5:return json_encode($e);break;case 6:return serialize($e);break;}}static function stripArgs(&$c){preg_match('/(?:\[.{2}\]){0,2}([^\[]*)/',$c,$k);return$k[1];}static function append2(&$l,$m,$n,$g){$h=count($n);for($c=1;$c<$h;$c++){$e=$n[$c];if(!isset($l[$c-1]))$l[$c-1]=array();self::recurse($l[$c-1],$e,$m,'',$g);}}private static function recurse(&$o,$e,$m,$p,$g){foreach($e as$i=>&$q){if($i[0]==='#')continue;self::stripArgs($i);$r=$i.'#'.$p;if(isset($m[$r]))$s=$m[$r];else$s=$m[$i];$t=is_array($q)&&(!isset($g[$s][2])||$g[$s][2]<5);if($t){if(isset($q[0])){foreach($q as$u=>&$v){$w=$s+$u;if(isset($o[$w]))trigger_error('Key collision: '.$i,E_USER_WARNING);$o[$w]=self::escape($v,$g[$w][2]);}}else{self::recurse($o,$q,$m,$p.'/'.$i,$g);}}else{if(isset($o[$s]))trigger_error('Key collision: '.$i,E_USER_WARNING);$o[$s]=self::escape($q,$g[$s][2]);}}}static function quote($a){preg_match('/([^.]*)\.?(.*)?/',$a,$k);if($k[2]!==''){return '`'.$k[1].'.'.$k[2].'`';}else{return '`'.$k[1].'`';}}static function quoteArray(&$x){foreach($x as&$q){$q=self::quote($q);}}static function table($y){if(is_array($y)){$z='';foreach($y as$u=>&$e){$aa=self::getType($e);if($u!==0)$z.=', ';$z.='`'.$e.'`';if($aa)$z.=' AS `'.$aa.'`';}return$z;}else{return '`'.$y.'`';}}static function value($j,$ba){$ca=$j?$j:gettype($ba);$j=\PDO::PARAM_STR;$da=2;if($ca==='integer'||$ca==='int'||$ca==='double'||$ca==='doub'){$j=\PDO::PARAM_INT;$da=1;$ba=(int)$ba;}else if($ca==='string'||$ca==='str'){$ba=(string)$ba;$da=2;}else if($ca==='boolean'||$ca==='bool'){$j=\PDO::PARAM_BOOL;$ba=$ba?'1':'0';$da=0;}else if($ca==='null'||$ca==='NULL'){$da=4;$j=\PDO::PARAM_NULL;$ba=null;}else if($ca==='resource'||$ca==='lob'){$j=\PDO::PARAM_LOB;$da=3;}else if($ca==='json'){$da=5;$ba=json_encode($ba);}else if($ca==='obj'||$ca==='object'){$da=6;$ba=serialize($ba);}else{$ba=(string)$ba;trigger_error('Invalid type '.$ca.' Assumed STRING',E_USER_WARNING);}return array($ba,$j,$da);}static function getType(&$a){preg_match('/(?<out>[^\[]*)(?:\[(?<a>[^\]]*)\])?/',$a,$b);$a=$b['out'];return isset($b['a'])?$b['a']:false;}static function rmComments($a){preg_match('/([^#]*)/',$a,$k);return$k[1];}static function conditions($n,&$g,&$ea=false,&$f=0,$fa=' AND ',$ga=' = ',$ha=''){$ia=0;$z='';foreach($n as$c=>&$e){preg_match('/^(?<r>\#)?(?:\[(?<a>.{2})\])(?:\[(?<b>.{2})\])?(?<out>.*)/',$c,$k);$ja=isset($k['r']);if(isset($k['a'])){$ka=$k['a'];$c=$k['out'];$la=isset($k['b'])?$k['b']:false;}else{$ka=false;}$ma=!isset($e[0]);$na=$fa;$oa=$ga;$j=$ja?false:self::getType($c);$x=is_array($e)&&$j!=='json'&&$j!=='obj';if($ka&&($ka==='||'||$ka==='&&')){$na=($ka==='||')?' OR ':' AND ';$ka=$la;if($x&&$ka&&($ka==='||'||$ka==='&&')){$fa=$na;$na=($ka==='||')?' OR ':' AND ';$ka=self::getArg($c);}}$pa=false;if($ka&&$ka!=='=='){switch($ka){case '!=':$oa=' != ';break;case '>>':$oa=' > ';break;case '<<':$oa=' < ';break;case '>=':$oa=' >= ';break;case '<=':$oa=' <= ';break;case '~~':$oa=' LIKE ';break;case '!~':$oa=' NOT LIKE ';break;default:if($ka!=='><'&&$ka!=='<>')throw new \Exception('Invalid operator '.$ka.' Available: ==,!=,>>,<<,>=,<=,~~,!~,<>,><');else$pa=true;break;}}else{if(!$ma||$ka==='==')$oa=' = ';}if(!$x)$fa=$na;if($ia!==0)$z.=$fa;$qa=self::rmComments($c);if(!$ja)$qa=self::quote($qa);if($x){$z.='(';if($ma){$z.=self::conditions($e,$g,$ea,$f,$na,$oa,$ha.'/'.$c);}else{if($ea!==false&&!$ja){$ea[$c]=$f;$ea[$c.'#'.$ha]=$f++;}if($pa){$f+=2;$z.=$qa.($ka==='<>'?'NOT':'').' BETWEEN ';if($ja){$z.=$e[0].' AND '.$e[1];}else{$z.='? AND ?';array_push($g,self::value($j,$e[0]));array_push($g,self::value($j,$e[1]));}}else{foreach($e as$i=>&$q){if($i!==0)$z.=$na;++$f;$z.=$qa.$oa;if($ja){$z.=$q;}else{$z.='?';array_push($g,self::value($j,$q));}}}}$z.=')';}else{$z.=$qa.$oa;if($ja){$z.=$e;}else{$z.='?';array_push($g,self::value($j,$e));if($ea!==false){$ea[$c]=$f;$ea[$c.'#'.$ha]=$f++;}}}++$ia;}return$z;}static function JOIN($fa,&$z,&$g,&$u){foreach($fa as$c=>&$e){$ja=self::isRaw($c);$ka=self::getArg($c);switch($ka){case '<<':$z.=' RIGHT JOIN ';break;case '>>':$z.=' LEFT JOIN ';break;case '<>':$z.=' FULL JOIN ';break;case '>~':$z.=' LEFT OUTER JOIN ';break;default:$z.=' JOIN ';break;}$z.='`'.$c.'` ON ';if($ja){$z.=$e;}else{$z.=self::conditions($e,$g,$ra,$u);}}}static function columns($sa,&$z,&$ta){$ua='';$ra=$sa[0][0];if($ra==='D'||$ra==='I'){if($sa[0]==='DISTINCT'){$z.='DISTINCT ';array_splice($sa,0,1);}else if(substr($sa[0],0,11)==='INSERT INTO'){$z=$sa[0].' '.$z;array_splice($sa,0,1);}else if(substr($sa[0],0,4)==='INTO'){$ua=' '.$sa[0].' ';array_splice($sa,0,1);}}if(isset($sa[0])){if($sa[0]==='*'){array_splice($sa,0,1);$z.='*';foreach($sa as$u=>&$e){preg_match('/(?<column>[a-zA-Z0-9_\.]*)(?:\[(?<type>[^\]]*)\])?/',$e,$va);$ta[$va['column']]=$va['type'];}}else{foreach($sa as$u=>&$e){preg_match('/(?<column>[a-zA-Z0-9_\.]*)(?:\[(?<alias>[^\]]*)\])?(?:\[(?<type>[^\]]*)\])?/',$e,$va);$e=$va['column'];$wa=false;if(isset($va['alias'])){$wa=$va['alias'];if(isset($va['type'])){$j=$va['type'];}else{if($wa==='json'||$wa==='obj'||$wa==='int'||$wa==='string'||$wa==='bool'){$j=$wa;$wa=false;}else$j=false;}if($j){if(!$ta)$ta=array();$ta[$wa?$wa:$e]=$j;}}if($u!==0){$z.=', ';}$z.=self::quote($e);if($wa)$z.=' AS `'.$wa.'`';}}}else$z.='*';$z.=$ua;}static function SELECT($y,$sa,$xa,$fa,$ya){$z='SELECT ';$g=$l=array();$ta=null;$u=0;if(!isset($sa[0])){$z.='*';}else{self::columns($sa,$z,$ta);}$z.=' FROM '.self::table($y);if($fa){self::JOIN($fa,$z,$g,$u);}if(!empty($xa)){$z.=' WHERE ';if(isset($xa[0])){$f=array();$z.=self::conditions($xa[0],$g,$f,$u);self::append2($l,$f,$xa,$g);}else{$z.=self::conditions($xa,$g);}}if($ya){if(is_int($ya)){$z.=' LIMIT '.$ya;}else if(is_string($ya)){$z.=' '.$ya;}else if(is_array($ya)){if(isset($ya[0])){$z.=' LIMIT '.(int)$ya[0].' OFFSET '.(int)$ya[1];}else{if(isset($ya['GROUP'])){$z.=' GROUP BY ';if(is_string($ya['GROUP'])){$z.=self::quote($ya['GROUP']);}else{self::quoteArray($ya['GROUP']);$z.=implode(', ',$ya['GROUP']);}if(isset($ya['HAVING'])){$z.=' HAVING '.(is_string($ya['HAVING'])?$ya['HAVING']:self::conditions($ya['HAVING'],$g,$ra,$u));}}if(isset($ya['ORDER'])){$z.=' ORDER BY '.self::quote($ya['ORDER']);}if(isset($ya['LIMIT'])){$z.=' LIMIT '.(int)$ya['LIMIT'];}if(isset($ya['OFFSET'])){$z.=' OFFSET '.(int)$ya['OFFSET'];}}}}return array($z,$g,$l,$ta);}static function INSERT($y,$za,$ab){$z='INSERT INTO '.self::table($y).' (';$g=$l=$f=array();$bb='';$cb=0;$db=isset($za[0]);$n=$db?$za[0]:$za;foreach($n as$c=>$e){$ja=self::isRaw($c);if($cb){$z.=', ';$bb.=', ';}else$cb=1;if(!$ja){preg_match('/(?<out>[^\[]*)(?:\[(?<type>[^]]*)\])?/',$c,$k);$c=$k['out'];}$z.='`'.$c.'`';if($ja){$bb.=$e;}else{$j=isset($k['type'])?$k['type']:false;$bb.='?';$eb=!$db&&(!$j||($j!=='json'&&$j!=='obj'))&&is_array($e);array_push($g,self::value($j,$eb?$e[0]:$e));if($db){$f[$c]=array($e,$j);}else if($eb){self::append($l,$e,$u++,$g);}}}$z.=') VALUES ('.$bb.')';if($db){unset($za[0]);foreach($za as$fb){$z.=', ('.$bb.')';foreach($f as$c=>$e){array_push($g,self::value($e[1],isset($fb[$c])?$fb[$c]:$e[0]));}}}if($ab)$z.=' '.$ab;return array($z,$g,$l);}static function UPDATE($y,$za,$xa){$z='UPDATE '.self::table($y).' SET ';$g=$l=$m=array();$u=$cb=0;$db=isset($za[0]);$n=$db?$za[0]:$za;foreach($n as$c=>&$e){$ja=self::isRaw($c);if($cb){$z.=', ';}else$cb=1;if($ja){$z.='`'.$c.'` = '.$e;}else{preg_match('/(?:\[(?<arg>.{2})\])?(?<out>[^\[]*)(?:\[(?<type>[^\]]*)\])?/',$c,$k);$c=$k['out'];$z.='`'.$c.'` = ';if(isset($k['arg'])){switch($k['arg']){case '+=':$z.='`'.$c.'` + ?';break;case '-=':$z.='`'.$c.'` - ?';break;case '/=':$z.='`'.$c.'` / ?';break;case '*=':$z.='`'.$c.'` * ?';break;default:$z.='?';break;}}$j=isset($k['type'])?$k['type']:false;$eb=(!$j||($j!=='json'&&$j!=='obj'))&&is_array($e);array_push($g,self::value($j,$eb?$e[0]:$e));if($db){$m[$c]=$u++;}else if($eb){self::append($l,$e,$u++,$g);}}}if($db)self::append2($l,$m,$za,$g);if(!empty($xa)){$z.=' WHERE ';$f=array();if(isset($xa[0])){$z.=self::conditions($xa[0],$g,$f,$u);self::append2($l,$f,$xa,$g);}else{$z.=self::conditions($xa,$g,$ra,$u);}}return array($z,$g,$l);}static function DELETE($y,$xa){$z='DELETE FROM '.self::table($y);$g=$l=array();if(!empty($xa)){$z.=' WHERE ';$f=array();if(isset($xa[0])){$z.=self::conditions($xa[0],$g,$f);self::append2($l,$f,$xa,$g);}else{$z.=self::conditions($xa,$g);}}return array($z,$g,$l);}}
// index.php
class SuperSQL{public$con;public$lockMode=false;function __construct($a,$b,$c){$this->con=new Connector($a,$b,$c);}function SELECT($d,$e=array(),$f=array(),$g=null,$h=false){if((is_int($g)||is_string($g)||isset($g[0]))&&!$h){$h=$g;$g=null;}$i=Parser::SELECT($d,$e,$f,$g,$h);return$this->con->_query($i[0],$i[1],$i[2],$i[3],$this->lockMode?0:1);}function INSERT($d,$j,$k=null){$i=Parser::INSERT($d,$j,$k);return$this->con->_query($i[0],$i[1],$i[2]);}function UPDATE($d,$j,$f=array()){$i=Parser::UPDATE($d,$j,$f);return$this->con->_query($i[0],$i[1],$i[2]);}function DELETE($d,$f=array()){$i=Parser::DELETE($d,$f);return$this->con->_query($i[0],$i[1],$i[2]);}function query($l,$m=null,$n=null,$o=0){return$this->con->query($l,$m,$n,$o);}function close(){$this->con->close();}function dev(){$this->con->dev=true;}function getLog(){return$this->con->log;}function transact($p){$this->con->db->beginTransaction();$q=$p($this);if($q===false)$this->con->db->rollBack();else$this->con->db->commit();return$q;}function modeLock($r){$this->lockMode=$r;}}
?>